{"version":3,"sources":["logo.svg","redux/actions/balance/constants.js","redux/actions/balance/balance.js","redux/reducers/balance/balanceReducer.js","redux/actions/bitcoin/constants.js","redux/actions/bitcoin/bitcoin.js","redux/reducers/bitcoin/bitcoinReducer.js","redux/rootReducer.js","redux/store.js","components/wallet/Wallet.view.js","components/wallet/Wallet.container.js","components/Loot/Loot.view.js","components/Loot/Loot.container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SET_BALANCE","DEPOSIT","WITHDRAW","constants","setBalance","balance","type","payload","deposit","parseInt","withdrawBalance","withdrawAmount","initialState","FETCH_BITCOIN","fetchBitcoin","dispatch","fetch","then","res","json","catch","err","console","log","bitcoinReducer","state","arguments","length","undefined","action","rootReducer","combineReducers","Object","objectSpread","bitcoin","middleware","logger","thunk","store","createStore","load","composeWithDevTools","applyMiddleware","apply","concat","save","getState","Wallet","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillReceiveProps","setState","handleChange","event","value","target","withdraw","_this2","_this$props","react_default","a","createElement","className","onChange","Button","onClick","Component","connect","ownProps","bindActionCreators","actions","WalletView","Loot","componentDidMount","computeBitcoin","keys","bpi","USD","rate","replace","LootView","App","Wallet_container","Loot_container","href","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9875755f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","//TODO: Create CONSTANTS\r\nexport const SET_BALANCE = \"SET_BALANCE\";\r\n\r\nexport const DEPOSIT = \"DEPOSIT\";\r\n\r\nexport const WITHDRAW = `WITHDRAW`;","import * as constants from \"./constants\";\r\n\r\nconst {SET_BALANCE, DEPOSIT} = constants;\r\n\r\nexport const setBalance = balance => ({type: SET_BALANCE, payload: balance});\r\n\r\nexport const deposit = deposit => ({\r\n    type: DEPOSIT,\r\n    payload: parseInt(deposit, 10)\r\n})\r\n\r\nexport const withdrawBalance = withdrawAmount => ({\r\n    type: constants.WITHDRAW,\r\n    payload: parseInt(withdrawAmount, 10)\r\n});","import * as constants from \"../../actions/balance/constants\";\r\nimport * as actions from \"../../actions/balance/balance\";\r\n\r\nconst initialState = {\r\n\r\n    balance: 0\r\n}\r\n\r\nexport default function balanceReducer(state = initialState, action) {\r\n\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n\r\n        case constants.SET_BALANCE:\r\n\r\n            return {\r\n                ...state,\r\n                balance: action.balance\r\n            }\r\n\r\n        case constants.DEPOSIT:\r\n            return {\r\n                ...state,\r\n                balance: state.balance + payload\r\n            }\r\n\r\n        case constants.WITHDRAW:\r\n            return {\r\n                ...state,\r\n                balance: state.balance - payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n","export const API_URL = `https://api.coindesk.com/v1/bpi/currentprice.json`;\r\n\r\nexport const FETCH_BITCOIN = `FETCH_BITCOIN`;","import * as constants from \"./constants\";\r\n\r\n//TODO: create actions\r\n\r\n//Note: redux-thunk gives us access to dispatch\r\nexport const fetchBitcoin = () => dispatch => {\r\n    return fetch(constants.API_URL)\r\n        .then(res => res.json())\r\n        .then(json => dispatch({type: constants.FETCH_BITCOIN, payload: json}))\r\n        .catch(err => {\r\n            console.log(err);\r\n        });\r\n};","import * as constants from \"../../actions/bitcoin/constants\";\r\nimport * as actions from \"../../actions/bitcoin/bitcoin\";\r\n\r\nconst initialState = {};\r\n\r\nfunction bitcoinReducer(state = initialState, action) {\r\n\r\n    const {type, payload} = action;\r\n\r\n    switch (type) {\r\n\r\n        case constants.FETCH_BITCOIN:\r\n\r\n            return payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\nexport default bitcoinReducer;","import {combineReducers} from 'redux';\r\nimport balanceReducer from \"./reducers/balance/balanceReducer\";\r\nimport bitcoinReducer from \"./reducers/bitcoin/bitcoinReducer\";\r\n\r\nconst rootReducer = combineReducers({balance: balanceReducer, bitcoin: bitcoinReducer});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\nimport rootReducer from \"./rootReducer\";\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport {save, load} from 'redux-localstorage-simple';\r\n\r\n/*\r\nNote: save() middleware for localstorage: load initialState from lcoalSTorage if exists\r\n*/\r\nconst middleware = [logger, thunk]\r\nconst store = createStore(rootReducer, load(), composeWithDevTools(applyMiddleware(...middleware, save())));\r\n\r\nconsole.log(\"store\", store.getState());\r\nexport default store;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button} from 'react-bootstrap';\r\nclass Wallet extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n            value: 0\r\n        };\r\n    }\r\n\r\n    /*\r\n@function: componentWillReceiveProps,\r\n@params: props:Object\r\n@desc: Update balance in state after every dispatched action to update redu store\r\n    */\r\n    componentWillReceiveProps = props => {\r\n        const {balance} = props;\r\n\r\n        this.setState({balance});\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const value = event.target.value;\r\n\r\n        this.setState({value});\r\n    }\r\n\r\n    deposit = () => {\r\n\r\n        const value = parseInt(this.state.value, 10);\r\n\r\n        this\r\n            .props\r\n            .deposit(value);\r\n    }\r\n\r\n    withdraw = () => {\r\n        const value = parseInt(this.state.value, 10);\r\n\r\n        this\r\n            .props\r\n            .withdrawBalance(value);\r\n    }\r\n\r\n    render()\r\n    {\r\n\r\n        const {balance, deposit, withdrawBalance} = this.props;\r\n        const {value} = this.state;\r\n\r\n        return (\r\n            <div>\r\n\r\n                <h3 className=\"balance\">\r\n                    Wallet Balance: {balance}\r\n                </h3>\r\n\r\n                <br/>\r\n\r\n                <input\r\n                    type='text'\r\n                    className='input-wallet'\r\n                    onChange={(event) => this.handleChange(event)}/>\r\n\r\n                <Button className=\"btn-deposit\" onClick={this.deposit}>Deposit</Button>\r\n\r\n                <Button className=\"btn-withdraw\" onClick={this.withdraw}>Withdraw</Button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nWallet.propTypes = {\r\n    balance: PropTypes.number.isRequired\r\n}\r\nexport default Wallet;\r\n","import React from 'react';\r\nimport WalletView from \"./Wallet.view\";\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport * as actions from \"../../redux/actions/balance/balance\";\r\n\r\nconst mapStateToProps = state => ({balance: state.balance.balance});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => bindActionCreators({\r\n    setBalance: actions.setBalance,\r\n    deposit: actions.deposit,\r\n    withdrawBalance: actions.withdrawBalance\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletView);\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Loot extends Component {\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n\r\n        this.state = {}\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this\r\n            .props\r\n            .fetchBitcoin();\r\n    }\r\n\r\n    componentWillReceiveProps = props => {}\r\n\r\n    computeBitcoin = () => {\r\n        const {bitcoin, balance} = this.props;\r\n\r\n        return (Object.keys(bitcoin).length === 0)\r\n            ? ''\r\n            : balance / parseInt(bitcoin.bpi.USD.rate.replace(',', ''), 10);\r\n\r\n    }\r\n\r\n    render()\r\n    {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <h3>Bitcoin Balance: {this.computeBitcoin()}</h3>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loot;","import React from 'react';\r\nimport {bindActionCreators} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport LootView from \"./Loot.view\";\r\nimport * as actions from \"../../redux/actions/bitcoin/bitcoin\";\r\n\r\nconst mapStateToProps = state => ({balance: state.balance.balance, bitcoin: state.bitcoin});\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => bindActionCreators({\r\n    fetchBitcoin: actions.fetchBitcoin\r\n}, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LootView);","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport WalletContainer from \"./components/wallet/Wallet.container\";\r\nimport Wallet from './components/wallet/Wallet.view';\r\nimport LootContainer from './components/Loot/Loot.container';\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          Loot Check</h2>\r\n\r\n        <WalletContainer/>\r\n\r\n        <hr/>\r\n        <br/>\r\n        <LootContainer/>\r\n\r\n        <div>\r\n          Powered by\r\n          <a target=\"_blank\" href=\"https://www.coindesk.com/price\">\r\n            Coindesk\r\n\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport store from \"./redux/store\";\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App/>\r\n</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls. Learn\r\n// more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}